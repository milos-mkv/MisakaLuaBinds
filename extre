
/**
 * Lua Types:
 *      LUA_TNIL, LUA_TBOOLEAN, LUA_TNUMBER, LUA_TSTRING, LUA_TTABLE, LUA_TFUNCTION, LUA_TUSERDATA, and LUA_TTHREAD.
 */
static void LuaStateStackDump (lua_State *L) 
{
    std::cout << "===== [LUA STACK BEGIN] =====" << std::endl;
    for (int i = 1; i <= lua_gettop(L); i++) 
    {
        int t = lua_type(L, i);
        switch (t) 
        {
        case LUA_TSTRING  : std::cout << lua_tostring (L, i) << std::endl; break;
        case LUA_TBOOLEAN : std::cout << lua_toboolean(L, i) << std::endl; break;
        case LUA_TNUMBER  : std::cout << lua_tonumber (L, i) << std::endl; break;
        default           : std::cout << lua_typename (L, t) << std::endl; break;
        }
    }
    std::cout << "===== [ LUA STACK END ] =====" << std::endl;
}

int i = 0;

class Entity
{
public:
    std::string name;

    Entity() {  
        std::cout << "Constructor" << std::endl;
         name = "Entity" + std::to_string(++i); 
         }
    ~Entity() { std::cout << "Destructor" << std::endl; }
    void Print() { std::cout << name << std::endl; }
};

static int Entity_Destructor(lua_State *L)
{
	auto obj = static_cast<std::shared_ptr<Entity>*>(lua_touserdata(L, -1));
	obj->reset();
	return 0;
}

static int Entity_Print(lua_State *L)
{
	if (lua_isuserdata(L, -1))
	{
		auto Obj = static_cast<std::shared_ptr<Entity>*>(lua_touserdata(L, -1));
		Obj->get()->Print();
	}
	else {
		printf("[Lua Error]: Tried to access non-userdata from the stack.");
	}
	return 0;
}
void RegisterEntity(lua_State *L)
{
    static const luaL_Reg Entity_Methods[] = {
		{ "__gc",   Entity_Destructor },
		{ "Print",	Entity_Print },
		{ NULL,		NULL },
	};

    //	Create an empty metatable and push it onto the stack.
	//	NOTE: The name does NOT need to match the name of our static struct above
	//	this is only done for readability
	luaL_newmetatable(L, "Entity_Methods");

    //	Duplicate the metatable so 2 now exist on the stack.
	lua_pushvalue(L, -1);

    /* Pop the first metatable off the stack and assign it to __index
	* of the second one. We set the metatable for the table to itself.
	* This is equivalent to the following in lua:
	* metatable = {}
	* metatable.__index = metatable
	*/
	lua_setfield(L, -2, "__index");

    //	Add our methods into the metatable.
	luaL_setfuncs(L, Entity_Methods, 0);
}
//	Here we have a function which instantiates userdata to represent our
//	Entity object, sets the appropriate metatable, and returns it to the Lua environment.
static int Entity_Create(lua_State *L)
{
	//	Push our userdata onto the stack.
	size_t ObjectSize = sizeof(std::shared_ptr<Entity>);

	void* Memory = lua_newuserdata(L, ObjectSize);
	auto resource = std::make_shared<Entity>();
	new(Memory) std::shared_ptr<Entity>(resource);

	//	Push our metatable onto the stack.
	luaL_getmetatable(L, "Entity_Methods");
	//	Pop the metatable off the stack and set apply it to our userdata.
	lua_setmetatable(L, -2);
	//	Return our userdata back to the Lua environment.
	return 1;
}


static bool LuaStateCheckIfOK(lua_State* L, int r)
{
    if (r != LUA_OK)
    {
        std::cout << lua_tostring(L, -1) << std::endl;
        lua_pop(L, -1);
        return false;
    }
    return true;
}

DRMR

